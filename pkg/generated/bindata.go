// Code generated for package generated by go-bindata DO NOT EDIT. (@generated)
// sources:
// deploy/controller-infra/base/deploy.yaml
// deploy/controller-infra/base/kustomization.yaml
// deploy/controller-infra/dev-overlay/controller.yaml
// deploy/controller-infra/dev-overlay/infra-namespace-configmap.yaml
// deploy/controller-infra/dev-overlay/kustomization.yaml
// deploy/controller-tenant/base/deploy.yaml
// deploy/controller-tenant/base/kustomization.yaml
// deploy/controller-tenant/dev-overlay/controller.yaml
// deploy/controller-tenant/dev-overlay/kustomization.yaml
// deploy/example/infracluster-kubeconfig.yaml
// deploy/example/kubevirt-config.yaml
// deploy/example/kubevirt.yaml
// deploy/example/storage-claim.yaml
// deploy/example/storageclass.yaml
// deploy/example/test-pod.yaml
// deploy/infra-cluster-service-account.yaml
// deploy/tenant/base/deploy.yaml
// deploy/tenant/base/kustomization.yaml
// deploy/tenant/base/rbac-snapshot-controller.yaml
// deploy/tenant/base/setup-snapshot-controller.yaml
// deploy/tenant/base/snapshot.storage.k8s.io_volumesnapshotclasses.yaml
// deploy/tenant/base/snapshot.storage.k8s.io_volumesnapshotcontents.yaml
// deploy/tenant/base/snapshot.storage.k8s.io_volumesnapshots.yaml
// deploy/tenant/dev-overlay/infra-namespace-configmap.yaml
// deploy/tenant/dev-overlay/kustomization.yaml
// deploy/tenant/dev-overlay/node.yaml
// deploy/tenant/dev-overlay/storageclass.yaml
package generated

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _deployControllerInfraBaseDeployYaml = []byte(`kind: Deployment
apiVersion: apps/v1
metadata:
  name: kubevirt-csi-controller
  namespace: kubevirt-csi-driver
  labels:
    app: kubevirt-csi-driver
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kubevirt-csi-driver
  template:
    metadata:
      labels:
        app: kubevirt-csi-driver
    spec:
      serviceAccount: kubevirt-csi
      priorityClassName: system-cluster-critical
      nodeSelector:
        node-role.kubernetes.io/control-plane: ""
      tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        - key: node-role.kubernetes.io/master
          operator: Exists
          effect: "NoSchedule"
      containers:
        - name: csi-driver
          imagePullPolicy: Always
          image: quay.io/kubevirt/csi-driver:latest
          args:
            - "--endpoint=$(CSI_ENDPOINT)"
            - "--infra-cluster-namespace=$(INFRACLUSTER_NAMESPACE)"
            - "--infra-cluster-labels=$(INFRACLUSTER_LABELS)"
            - "--tenant-cluster-kubeconfig=/var/run/secrets/tenantcluster/value"
            - "--run-node-service=false"
            - "--run-controller-service=true"
            - "--v=5"
          ports:
            - name: healthz
              containerPort: 10301
              protocol: TCP
          env:
            - name: CSI_ENDPOINT
              value: unix:///var/lib/csi/sockets/pluginproxy/csi.sock
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: INFRACLUSTER_NAMESPACE
              valueFrom:
                configMapKeyRef:
                  name: driver-config
                  key: infraClusterNamespace
            - name: INFRACLUSTER_LABELS
              valueFrom:
                configMapKeyRef:
                  name: driver-config
                  key: infraClusterLabels
            - name: INFRA_STORAGE_CLASS_ENFORCEMENT
              valueFrom:
                configMapKeyRef:
                  name: driver-config
                  key: infraStorageClassEnforcement
                  optional: true
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
            - name: tenantcluster
              mountPath: "/var/run/secrets/tenantcluster"
          resources:
            requests:
              memory: 50Mi
              cpu: 10m
        - name: csi-provisioner
          image: quay.io/openshift/origin-csi-external-provisioner:latest
          args:
            - "--csi-address=$(ADDRESS)"
            - "--default-fstype=ext4"
            - "--kubeconfig=/var/run/secrets/tenantcluster/value"
            - "--v=5"
            - "--timeout=3m"
            - "--retry-interval-max=1m"
          env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
            - name: tenantcluster
              mountPath: "/var/run/secrets/tenantcluster"
        - name: csi-attacher
          image: quay.io/openshift/origin-csi-external-attacher:latest
          args:
            - "--csi-address=$(ADDRESS)"
            - "--kubeconfig=/var/run/secrets/tenantcluster/value"
            - "--v=5"
            - "--timeout=3m"
            - "--retry-interval-max=1m"
          env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
            - name: tenantcluster
              mountPath: "/var/run/secrets/tenantcluster"
          resources:
            requests:
              memory: 50Mi
              cpu: 10m
        - name: csi-liveness-probe
          image: quay.io/openshift/origin-csi-livenessprobe:latest
          args:
            - "--csi-address=/csi/csi.sock"
            - "--probe-timeout=3s"
            - "--health-port=10301"
          volumeMounts:
            - name: socket-dir
              mountPath: /csi
            - name: tenantcluster
              mountPath: "/var/run/secrets/tenantcluster"
          resources:
            requests:
              memory: 50Mi
              cpu: 10m
        - name: csi-snapshotter
          args:
          - "--v=5"
          - "--csi-address=/csi/csi.sock"
          - "--kubeconfig=/var/run/secrets/tenantcluster/value"
          image: k8s.gcr.io/sig-storage/csi-snapshotter:v4.2.1
          imagePullPolicy: IfNotPresent
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /csi
            name: socket-dir
          - name: tenantcluster
            mountPath: "/var/run/secrets/tenantcluster"
          resources:
            requests:
              memory: 20Mi
              cpu: 10m
      volumes:
        - name: socket-dir
          emptyDir: {}
        - name: tenantcluster
          secret:
            secretName: kvcluster-kubeconfig
`)

func deployControllerInfraBaseDeployYamlBytes() ([]byte, error) {
	return _deployControllerInfraBaseDeployYaml, nil
}

func deployControllerInfraBaseDeployYaml() (*asset, error) {
	bytes, err := deployControllerInfraBaseDeployYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/controller-infra/base/deploy.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployControllerInfraBaseKustomizationYaml = []byte(`commonLabels:
  app: kubevirt-csi-driver
resources:
- deploy.yaml
`)

func deployControllerInfraBaseKustomizationYamlBytes() ([]byte, error) {
	return _deployControllerInfraBaseKustomizationYaml, nil
}

func deployControllerInfraBaseKustomizationYaml() (*asset, error) {
	bytes, err := deployControllerInfraBaseKustomizationYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/controller-infra/base/kustomization.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployControllerInfraDevOverlayControllerYaml = []byte(`kind: Deployment
apiVersion: apps/v1
metadata:
  name: kubevirt-csi-controller
  namespace: kubevirt-csi-driver
  labels:
    app: kubevirt-csi-driver
spec:
  template:
    spec:
      containers:
        - name: csi-driver
          image: registry:5000/kubevirt-csi-driver:latest
`)

func deployControllerInfraDevOverlayControllerYamlBytes() ([]byte, error) {
	return _deployControllerInfraDevOverlayControllerYaml, nil
}

func deployControllerInfraDevOverlayControllerYaml() (*asset, error) {
	bytes, err := deployControllerInfraDevOverlayControllerYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/controller-infra/dev-overlay/controller.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployControllerInfraDevOverlayInfraNamespaceConfigmapYaml = []byte(`apiVersion: v1
kind: ConfigMap
metadata:
  name: driver-config
  namespace: kubevirt-csi-driver
data:
  infraClusterNamespace: kvcluster
  infraClusterLabels: csi-driver/cluster=tenant
`)

func deployControllerInfraDevOverlayInfraNamespaceConfigmapYamlBytes() ([]byte, error) {
	return _deployControllerInfraDevOverlayInfraNamespaceConfigmapYaml, nil
}

func deployControllerInfraDevOverlayInfraNamespaceConfigmapYaml() (*asset, error) {
	bytes, err := deployControllerInfraDevOverlayInfraNamespaceConfigmapYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/controller-infra/dev-overlay/infra-namespace-configmap.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployControllerInfraDevOverlayKustomizationYaml = []byte(`resources:
- ../base
- infra-namespace-configmap.yaml
namespace: kvcluster
patches:
- path: controller.yaml
`)

func deployControllerInfraDevOverlayKustomizationYamlBytes() ([]byte, error) {
	return _deployControllerInfraDevOverlayKustomizationYaml, nil
}

func deployControllerInfraDevOverlayKustomizationYaml() (*asset, error) {
	bytes, err := deployControllerInfraDevOverlayKustomizationYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/controller-infra/dev-overlay/kustomization.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployControllerTenantBaseDeployYaml = []byte(`---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: kubevirt-csi-controller
  namespace: kubevirt-csi-driver
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kubevirt-csi-driver
  template:
    metadata:
      labels:
        app: kubevirt-csi-driver
    spec:
      serviceAccount: kubevirt-csi-controller-sa
      priorityClassName: system-cluster-critical
      nodeSelector:
        node-role.kubernetes.io/control-plane: ""
      tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        - key: node-role.kubernetes.io/master
          operator: Exists
          effect: "NoSchedule"
        - key: node-role.kubernetes.io/control-plane
          operator: Exists
          effect: "NoSchedule"
      containers:
        - name: csi-driver
          imagePullPolicy: Always
          image: quay.io/kubevirt/csi-driver:latest
          args:
            - "--endpoint=$(CSI_ENDPOINT)"
            - "--infra-cluster-namespace=$(INFRACLUSTER_NAMESPACE)"
            - "--infra-cluster-kubeconfig=/var/run/secrets/infracluster/kubeconfig"
            - "--infra-cluster-labels=$(INFRACLUSTER_LABELS)"
            - --v=5
          ports:
            - name: healthz
              containerPort: 10301
              protocol: TCP
          env:
            - name: CSI_ENDPOINT
              value: unix:///var/lib/csi/sockets/pluginproxy/csi.sock
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: INFRACLUSTER_NAMESPACE
              valueFrom:
                configMapKeyRef:
                  name: driver-config
                  key: infraClusterNamespace
            - name: INFRACLUSTER_LABELS
              valueFrom:
                configMapKeyRef:
                  name: driver-config
                  key: infraClusterLabels
            - name: INFRA_STORAGE_CLASS_ENFORCEMENT
              valueFrom:
                configMapKeyRef:
                  name: driver-config
                  key: infraStorageClassEnforcement
                  optional: true
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
            - name: infracluster
              mountPath: "/var/run/secrets/infracluster"
          resources:
            requests:
              memory: 50Mi
              cpu: 10m
            limits:
              memory: 500Mi
              cpu: 250m
        - name: csi-provisioner
          image: quay.io/openshift/origin-csi-external-provisioner:latest
          args:
            - --csi-address=$(ADDRESS)
            - --default-fstype=ext4
            - --v=5
          env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
          resources:
            requests:
              memory: 50Mi
              cpu: 10m
            limits:
              memory: 500Mi
              cpu: 250m
        - name: csi-attacher
          image: quay.io/openshift/origin-csi-external-attacher:latest
          args:
            - --csi-address=$(ADDRESS)
            - --v=5
          env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
          resources:
            requests:
              memory: 50Mi
              cpu: 10m
            limits:
              memory: 500Mi
              cpu: 250m
        - name: csi-liveness-probe
          image: quay.io/openshift/origin-csi-livenessprobe:latest
          args:
            - --csi-address=/csi/csi.sock
            - --probe-timeout=3s
            - --health-port=10301
          volumeMounts:
            - name: socket-dir
              mountPath: /csi
          resources:
            requests:
              memory: 50Mi
              cpu: 10m
            limits:
              memory: 500Mi
              cpu: 250m
        - name: csi-snapshotter
          args:
          - --v=3
          - --csi-address=/csi/csi.sock
          image: k8s.gcr.io/sig-storage/csi-snapshotter:v4.2.1
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /csi
            name: socket-dir
          resources:
            requests:
              memory: 20Mi
              cpu: 10m
            limits:
              memory: 500Mi
              cpu: 250m
      volumes:
        - name: socket-dir
          emptyDir: {}
        - name: infracluster
          secret:
            secretName: infra-cluster-credentials
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-snapshotter-role
subjects:
  - kind: ServiceAccount
    name: kubevirt-csi-controller-sa
    namespace: kubevirt-csi-driver
roleRef:
  kind: ClusterRole
  name: external-snapshotter-runner
  apiGroup: rbac.authorization.k8s.io
`)

func deployControllerTenantBaseDeployYamlBytes() ([]byte, error) {
	return _deployControllerTenantBaseDeployYaml, nil
}

func deployControllerTenantBaseDeployYaml() (*asset, error) {
	bytes, err := deployControllerTenantBaseDeployYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/controller-tenant/base/deploy.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployControllerTenantBaseKustomizationYaml = []byte(`commonLabels:
  app: kubevirt-csi-driver
resources:
- deploy.yaml
`)

func deployControllerTenantBaseKustomizationYamlBytes() ([]byte, error) {
	return _deployControllerTenantBaseKustomizationYaml, nil
}

func deployControllerTenantBaseKustomizationYaml() (*asset, error) {
	bytes, err := deployControllerTenantBaseKustomizationYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/controller-tenant/base/kustomization.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployControllerTenantDevOverlayControllerYaml = []byte(`kind: Deployment
apiVersion: apps/v1
metadata:
  name: kubevirt-csi-controller
  namespace: kubevirt-csi-driver
  labels:
    app: kubevirt-csi-driver
spec:
  template:
    spec:
      containers:
        - name: csi-driver
          image: 192.168.66.2:5000/kubevirt-csi-driver:latest
`)

func deployControllerTenantDevOverlayControllerYamlBytes() ([]byte, error) {
	return _deployControllerTenantDevOverlayControllerYaml, nil
}

func deployControllerTenantDevOverlayControllerYaml() (*asset, error) {
	bytes, err := deployControllerTenantDevOverlayControllerYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/controller-tenant/dev-overlay/controller.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployControllerTenantDevOverlayKustomizationYaml = []byte(`resources:
- ../base
namespace: kubevirt-csi-driver
patches:
- path: controller.yaml
`)

func deployControllerTenantDevOverlayKustomizationYamlBytes() ([]byte, error) {
	return _deployControllerTenantDevOverlayKustomizationYaml, nil
}

func deployControllerTenantDevOverlayKustomizationYaml() (*asset, error) {
	bytes, err := deployControllerTenantDevOverlayKustomizationYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/controller-tenant/dev-overlay/kustomization.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployExampleInfraclusterKubeconfigYaml = []byte(`apiVersion: v1
clusters:
- cluster:
    certificate-authority-data: <Base64 of CA. Take value from the kubeconfig used to create the ServiceAccount kubevirt-csi>
    server: <URL of cluster. E.g.https://api.crc.testing:6443. Take value from the kubeconfig used to create the ServiceAccount kubevirt-csi>
  name: infra-cluster
contexts:
- context:
    cluster: infra-cluster
    namespace: <optional, not used>
    user: kubevirt-csi
  name: only-context
current-context: only-context
kind: Config
preferences: {}
users:
- name: kubevirt-csi
  user:
    token: <use token from secret in ServiceAccount kubevirt-csi. Decode it from base64 (base64 -d)>
`)

func deployExampleInfraclusterKubeconfigYamlBytes() ([]byte, error) {
	return _deployExampleInfraclusterKubeconfigYaml, nil
}

func deployExampleInfraclusterKubeconfigYaml() (*asset, error) {
	bytes, err := deployExampleInfraclusterKubeconfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/example/infracluster-kubeconfig.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployExampleKubevirtConfigYaml = []byte(`apiVersion: v1
kind: ConfigMap
metadata:
  name: kubevirt-config
  namespace: kubevirt
data:
  default-network-interface: masquerade
  feature-gates: DataVolumes,SRIOV,LiveMigration,CPUManager,CPUNodeDiscovery,Sidecar,Snapshot,HotplugVolumes
  selinuxLauncherType: virt_launcher.process
  smbios: |-
    Family: KubeVirt
    Manufacturer: KubeVirt
    Product: None
`)

func deployExampleKubevirtConfigYamlBytes() ([]byte, error) {
	return _deployExampleKubevirtConfigYaml, nil
}

func deployExampleKubevirtConfigYaml() (*asset, error) {
	bytes, err := deployExampleKubevirtConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/example/kubevirt-config.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployExampleKubevirtYaml = []byte(`apiVersion: kubevirt.io/v1alpha3
kind: KubeVirt
metadata:
  name: kubevirt
  namespace: kubevirt
spec:
  certificateRotateStrategy: {}
  configuration:
    developerConfiguration:
      featureGates:
      - DataVolumes
      - SRIOV
      - LiveMigration
      - CPUManager
      - CPUNodeDiscovery
      - Sidecar
      - Snapshot
      - HotplugVolumes
    network:
      defaultNetworkInterface: masquerade
    smbios:
      family: KubeVirt
      manufacturer: KubeVirt
      product: None
      selinuxLauncherType: virt_launcher.process
  customizeComponents: {}
  uninstallStrategy: BlockUninstallIfWorkloadsExist
`)

func deployExampleKubevirtYamlBytes() ([]byte, error) {
	return _deployExampleKubevirtYaml, nil
}

func deployExampleKubevirtYaml() (*asset, error) {
	bytes, err := deployExampleKubevirtYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/example/kubevirt.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployExampleStorageClaimYaml = []byte(`kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: 1g-kubevirt-disk
spec:
  storageClassName: kubevirt
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
`)

func deployExampleStorageClaimYamlBytes() ([]byte, error) {
	return _deployExampleStorageClaimYaml, nil
}

func deployExampleStorageClaimYaml() (*asset, error) {
	bytes, err := deployExampleStorageClaimYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/example/storage-claim.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployExampleStorageclassYaml = []byte(`apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: kubevirt
  annotations:
    storageclass.kubernetes.io/is-default-class: "true"
provisioner: csi.kubevirt.io
parameters:
  infraStorageClassName: standard
  bus: scsi
`)

func deployExampleStorageclassYamlBytes() ([]byte, error) {
	return _deployExampleStorageclassYaml, nil
}

func deployExampleStorageclassYaml() (*asset, error) {
	bytes, err := deployExampleStorageclassYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/example/storageclass.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployExampleTestPodYaml = []byte(`apiVersion: v1 
kind: Pod 
metadata:
  name: testpodwithcsi
spec:
  containers:
  - image: busybox
    name: testpodwithcsi
    command: ["sh", "-c", "while true; do ls -la /opt; echo this file system was made availble using kubevirt-csi-driver; mktmp /opt/test-XXXXXX; sleep 1m; done"]
    imagePullPolicy: Always
    volumeMounts:
    - name: pv0002
      mountPath: "/opt"
  volumes:
  - name: pv0002
    persistentVolumeClaim:
      claimName: 1g-kubevirt-disk
`)

func deployExampleTestPodYamlBytes() ([]byte, error) {
	return _deployExampleTestPodYaml, nil
}

func deployExampleTestPodYaml() (*asset, error) {
	bytes, err := deployExampleTestPodYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/example/test-pod.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployInfraClusterServiceAccountYaml = []byte(`apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubevirt-csi
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: kubevirt-csi
rules:
- apiGroups: ["cdi.kubevirt.io"]
  resources: ["datavolumes"]
  verbs: ["get", "create", "delete"]
- apiGroups: ["kubevirt.io"]
  resources: ["virtualmachineinstances"]
  verbs: ["list", "get"]
- apiGroups: ["subresources.kubevirt.io"]
  resources: ["virtualmachineinstances/addvolume", "virtualmachineinstances/removevolume"]
  verbs: ["update"]
- apiGroups: ["snapshot.storage.k8s.io"]
  resources: ["volumesnapshots"]
  verbs: ["get", "create", "delete"]
- apiGroups: [""]
  resources: ["persistentvolumeclaims"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kubevirt-csi
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kubevirt-csi
subjects:
- kind: ServiceAccount
  name: kubevirt-csi


`)

func deployInfraClusterServiceAccountYamlBytes() ([]byte, error) {
	return _deployInfraClusterServiceAccountYaml, nil
}

func deployInfraClusterServiceAccountYaml() (*asset, error) {
	bytes, err := deployInfraClusterServiceAccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/infra-cluster-service-account.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployTenantBaseDeployYaml = []byte(`apiVersion: storage.k8s.io/v1
kind: CSIDriver
metadata:
  name: csi.kubevirt.io
spec:
  attachRequired: true
  podInfoOnMount: true
  fsGroupPolicy: ReadWriteOnceWithFSType
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubevirt-csi-controller-sa
  namespace: kubevirt-csi-driver
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kubevirt-csi-controller-cr
rules:
  - apiGroups: ['']
    resources: ['persistentvolumes']
    verbs: ['create', 'delete', 'get', 'list', 'watch', 'update', 'patch']
  - apiGroups: ['']
    resources: ['secrets']
    verbs: ['get', 'list']
  - apiGroups: ['']
    resources: ['persistentvolumeclaims']
    verbs: ['get', 'list', 'watch', 'update']
  - apiGroups: [""]
    resources: ["persistentvolumeclaims/status"]
    verbs: ["update", "patch"]
  - apiGroups: ['']
    resources: ['nodes']
    verbs: ['get', 'list', 'watch']
  - apiGroups: ['storage.k8s.io']
    resources: ['volumeattachments']
    verbs: ['get', 'list', 'watch', 'update', 'patch']
  - apiGroups: ['storage.k8s.io']
    resources: ['storageclasses']
    verbs: ['get', 'list', 'watch']
  - apiGroups: ['csi.storage.k8s.io']
    resources: ['csidrivers']
    verbs: ['get', 'list', 'watch', 'update', 'create']
  - apiGroups: ['']
    resources: ['events']
    verbs: ['list', 'watch', 'create', 'update', 'patch']
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotcontents"]
    verbs: ["create", "get", "list", "watch", "update", "delete"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshots"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshots/status"]
    verbs: ["update"]
  - apiGroups: [ "storage.k8s.io" ]
    resources: [ "volumeattachments/status" ]
    verbs: [ "get", "list", "watch", "update", "patch" ]
  - apiGroups: ["storage.k8s.io"]
    resources: ["csinodes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["security.openshift.io"]
    resources: ["securitycontextconstraints"]
    verbs: ["use"]
    resourceNames: ["privileged"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kubevirt-csi-controller-binding
subjects:
  - kind: ServiceAccount
    name: kubevirt-csi-controller-sa
    namespace: kubevirt-csi-driver
roleRef:
  kind: ClusterRole
  name: kubevirt-csi-controller-cr
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubevirt-csi-node-sa
  namespace: kubevirt-csi-driver
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubevirt-csi-snapshot-sa
  namespace: kubevirt-csi-driver
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kubevirt-csi-node-cr
rules:
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "update", "create", "delete"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "watch", "update", "patch"]
  - apiGroups: ["csi.storage.k8s.io"]
    resources: ["csinodeinfos"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["csinodes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["volumeattachments"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["volumeattachments/status"]
    verbs: ["get", "list", "watch", "update", "patch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["list", "watch", "create", "update", "patch"]
  - apiGroups: ["security.openshift.io"]
    resources: ["securitycontextconstraints"]
    verbs: ["use"]
    resourceNames: ["privileged"]
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: external-snapshotter-runner
rules:
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["list", "watch", "create", "update", "patch"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotcontents"]
    verbs: ["create", "get", "list", "watch", "update", "delete", "patch"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotcontents/status"]
    verbs: ["update", "patch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kubevirt-csi-node-binding
subjects:
  - kind: ServiceAccount
    name: kubevirt-csi-node-sa
    namespace: kubevirt-csi-driver
roleRef:
  kind: ClusterRole
  name: kubevirt-csi-node-cr
  apiGroup: rbac.authorization.k8s.io
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-snapshotter-role
subjects:
  - kind: ServiceAccount
    name: kubevirt-csi-snapshot-sa
    namespace: kubevirt-csi-driver
roleRef:
  kind: ClusterRole
  # change the name also here if the ClusterRole gets renamed
  name: external-snapshotter-runner
  apiGroup: rbac.authorization.k8s.io
---
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: kubevirt-csi-node
  namespace: kubevirt-csi-driver
spec:
  selector:
    matchLabels:
      app: kubevirt-csi-driver
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: kubevirt-csi-driver
    spec:
      serviceAccount: kubevirt-csi-node-sa
      priorityClassName: system-node-critical
      tolerations:
        - operator: Exists
      containers:
        - name: csi-driver
          securityContext:
            privileged: true
            allowPrivilegeEscalation: true
          imagePullPolicy: Always
          image: quay.io/kubevirt/csi-driver:latest
          args:
            - "--endpoint=unix:/csi/csi.sock"
            - "--node-name=$(KUBE_NODE_NAME)"
            - "--run-node-service=true"
            - "--run-controller-service=false"
            - "--v=5"
          env:
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          volumeMounts:
            - name: kubelet-dir
              mountPath: /var/lib/kubelet
              mountPropagation: "Bidirectional"
            - name: plugin-dir
              mountPath: /csi
            - name: device-dir
              mountPath: /dev
            - name: udev
              mountPath: /run/udev
          ports:
            - name: healthz
              containerPort: 10300
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: healthz
            initialDelaySeconds: 10
            timeoutSeconds: 3
            periodSeconds: 10
            failureThreshold: 5
          resources:
            requests:
              memory: 50Mi
              cpu: 10m
        - name: csi-node-driver-registrar
          image: quay.io/openshift/origin-csi-node-driver-registrar:latest
          args:
            - "--csi-address=$(ADDRESS)"
            - "--kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)"
            - "--v=5"
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-c", "rm -rf /registration/csi.kubevirt.io-reg.sock /csi/csi.sock"]
          env:
            - name: ADDRESS
              value: /csi/csi.sock
            - name: DRIVER_REG_SOCK_PATH
              value: /var/lib/kubelet/plugins/csi.kubevirt.io/csi.sock
          volumeMounts:
            - name: plugin-dir
              mountPath: /csi
            - name: registration-dir
              mountPath: /registration
          resources:
            requests:
              memory: 20Mi
              cpu: 5m
        - name: csi-liveness-probe
          image: quay.io/openshift/origin-csi-livenessprobe:latest
          args:
            - "--csi-address=/csi/csi.sock"
            - "--probe-timeout=3s"
            - "--health-port=10300"
          volumeMounts:
            - name: plugin-dir
              mountPath: /csi
          resources:
            requests:
              memory: 20Mi
              cpu: 5m
      volumes:
        - name: kubelet-dir
          hostPath:
            path: /var/lib/kubelet
            type: Directory
        - name: plugin-dir
          hostPath:
            path: /var/lib/kubelet/plugins/csi.kubevirt.io/
            type: DirectoryOrCreate
        - name: registration-dir
          hostPath:
            path: /var/lib/kubelet/plugins_registry/
            type: Directory
        - name: device-dir
          hostPath:
            path: /dev
            type: Directory
        - name: udev
          hostPath:
            path: /run/udev
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: driver-config
  namespace: kubevirt-csi-driver
data:
  infraClusterNamespace: 
  infraClusterLabels: csi-driver/cluster=tenant
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: kubevirt
  annotations:
    storageclass.kubernetes.io/is-default-class: "true"
provisioner: csi.kubevirt.io
parameters:
  infraStorageClassName: standard
  bus: scsi
---
apiVersion: snapshot.storage.k8s.io/v1
kind: VolumeSnapshotClass
metadata:
  name: kubevirt-csi-snapclass
driver: csi.kubevirt.io
deletionPolicy: Delete
`)

func deployTenantBaseDeployYamlBytes() ([]byte, error) {
	return _deployTenantBaseDeployYaml, nil
}

func deployTenantBaseDeployYaml() (*asset, error) {
	bytes, err := deployTenantBaseDeployYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/tenant/base/deploy.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployTenantBaseKustomizationYaml = []byte(`commonLabels:
  app: kubevirt-csi-driver
resources:
- rbac-snapshot-controller.yaml
- setup-snapshot-controller.yaml
- snapshot.storage.k8s.io_volumesnapshotclasses.yaml
- snapshot.storage.k8s.io_volumesnapshotcontents.yaml
- snapshot.storage.k8s.io_volumesnapshots.yaml
- deploy.yaml
`)

func deployTenantBaseKustomizationYamlBytes() ([]byte, error) {
	return _deployTenantBaseKustomizationYaml, nil
}

func deployTenantBaseKustomizationYaml() (*asset, error) {
	bytes, err := deployTenantBaseKustomizationYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/tenant/base/kustomization.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployTenantBaseRbacSnapshotControllerYaml = []byte(`# RBAC file for the snapshot controller.
#
# The snapshot controller implements the control loop for CSI snapshot functionality.
# It should be installed as part of the base Kubernetes distribution in an appropriate
# namespace for components implementing base system functionality. For installing with
# Vanilla Kubernetes, kube-system makes sense for the namespace.

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: snapshot-controller
  namespace: kube-system

---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: snapshot-controller-runner
rules:
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["list", "watch", "create", "update", "patch"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotcontents"]
    verbs: ["create", "get", "list", "watch", "update", "delete", "patch"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotcontents/status"]
    verbs: ["patch"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshots"]
    verbs: ["get", "list", "watch", "update", "patch", "delete"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshots/status"]
    verbs: ["update", "patch"]

  - apiGroups: ["groupsnapshot.storage.k8s.io"]
    resources: ["volumegroupsnapshotclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["groupsnapshot.storage.k8s.io"]
    resources: ["volumegroupsnapshotcontents"]
    verbs: ["create", "get", "list", "watch", "update", "delete", "patch"]
  - apiGroups: ["groupsnapshot.storage.k8s.io"]
    resources: ["volumegroupsnapshotcontents/status"]
    verbs: ["patch"]
  - apiGroups: ["groupsnapshot.storage.k8s.io"]
    resources: ["volumegroupsnapshots"]
    verbs: ["get", "list", "watch", "update", "patch"]
  - apiGroups: ["groupsnapshot.storage.k8s.io"]
    resources: ["volumegroupsnapshots/status"]
    verbs: ["update", "patch"]

  # Enable this RBAC rule only when using distributed snapshotting, i.e. when the enable-distributed-snapshotting flag is set to true
  # - apiGroups: [""]
  #   resources: ["nodes"]
  #   verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: snapshot-controller-role
subjects:
  - kind: ServiceAccount
    name: snapshot-controller
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: snapshot-controller-runner
  apiGroup: rbac.authorization.k8s.io

---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: snapshot-controller-leaderelection
  namespace: kube-system
rules:
- apiGroups: ["coordination.k8s.io"]
  resources: ["leases"]
  verbs: ["get", "watch", "list", "delete", "update", "create"]

---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: snapshot-controller-leaderelection
  namespace: kube-system
subjects:
  - kind: ServiceAccount
    name: snapshot-controller
roleRef:
  kind: Role
  name: snapshot-controller-leaderelection
  apiGroup: rbac.authorization.k8s.io
`)

func deployTenantBaseRbacSnapshotControllerYamlBytes() ([]byte, error) {
	return _deployTenantBaseRbacSnapshotControllerYaml, nil
}

func deployTenantBaseRbacSnapshotControllerYaml() (*asset, error) {
	bytes, err := deployTenantBaseRbacSnapshotControllerYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/tenant/base/rbac-snapshot-controller.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployTenantBaseSetupSnapshotControllerYaml = []byte(`# This YAML file shows how to deploy the snapshot controller

# The snapshot controller implements the control loop for CSI snapshot functionality.
# It should be installed as part of the base Kubernetes distribution in an appropriate
# namespace for components implementing base system functionality. For installing with
# Vanilla Kubernetes, kube-system makes sense for the namespace.

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: snapshot-controller
  namespace: kube-system
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: snapshot-controller
  # The snapshot controller won't be marked as ready if the v1 CRDs are unavailable.
  # The flag --retry-crd-interval-max is used to determine how long the controller
  # will wait for the CRDs to become available before exiting. The default is 30 seconds
  # so minReadySeconds should be set slightly higher than the flag value.
  minReadySeconds: 35
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: snapshot-controller
    spec:
      serviceAccountName: snapshot-controller
      containers:
        - name: snapshot-controller
          image: registry.k8s.io/sig-storage/snapshot-controller:v6.3.1
          args:
            - "--v=5"
            - "--leader-election=true"
            # Add a marker to the snapshot-controller manifests. This is needed to enable feature gates in CSI prow jobs.
            # For example, in https://github.com/kubernetes-csi/csi-release-tools/pull/209, the snapshot-controller YAML is updated to add --prevent-volume-mode-conversion=true so that the feature can be enabled for certain e2e tests.
            # end snapshot controller args
          imagePullPolicy: IfNotPresent
`)

func deployTenantBaseSetupSnapshotControllerYamlBytes() ([]byte, error) {
	return _deployTenantBaseSetupSnapshotControllerYaml, nil
}

func deployTenantBaseSetupSnapshotControllerYaml() (*asset, error) {
	bytes, err := deployTenantBaseSetupSnapshotControllerYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/tenant/base/setup-snapshot-controller.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployTenantBaseSnapshotStorageK8sIo_volumesnapshotclassesYaml = []byte(`---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    api-approved.kubernetes.io: "https://github.com/kubernetes-csi/external-snapshotter/pull/814"
    controller-gen.kubebuilder.io/version: v0.12.0
  creationTimestamp: null
  name: volumesnapshotclasses.snapshot.storage.k8s.io
spec:
  group: snapshot.storage.k8s.io
  names:
    kind: VolumeSnapshotClass
    listKind: VolumeSnapshotClassList
    plural: volumesnapshotclasses
    shortNames:
    - vsclass
    - vsclasses
    singular: volumesnapshotclass
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .driver
      name: Driver
      type: string
    - description: Determines whether a VolumeSnapshotContent created through the
        VolumeSnapshotClass should be deleted when its bound VolumeSnapshot is deleted.
      jsonPath: .deletionPolicy
      name: DeletionPolicy
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1
    schema:
      openAPIV3Schema:
        description: VolumeSnapshotClass specifies parameters that a underlying storage
          system uses when creating a volume snapshot. A specific VolumeSnapshotClass
          is used by specifying its name in a VolumeSnapshot object. VolumeSnapshotClasses
          are non-namespaced
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          deletionPolicy:
            description: deletionPolicy determines whether a VolumeSnapshotContent
              created through the VolumeSnapshotClass should be deleted when its bound
              VolumeSnapshot is deleted. Supported values are "Retain" and "Delete".
              "Retain" means that the VolumeSnapshotContent and its physical snapshot
              on underlying storage system are kept. "Delete" means that the VolumeSnapshotContent
              and its physical snapshot on underlying storage system are deleted.
              Required.
            enum:
            - Delete
            - Retain
            type: string
          driver:
            description: driver is the name of the storage driver that handles this
              VolumeSnapshotClass. Required.
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          parameters:
            additionalProperties:
              type: string
            description: parameters is a key-value map with storage driver specific
              parameters for creating snapshots. These values are opaque to Kubernetes.
            type: object
        required:
        - deletionPolicy
        - driver
        type: object
    served: true
    storage: true
    subresources: {}
  - additionalPrinterColumns:
    - jsonPath: .driver
      name: Driver
      type: string
    - description: Determines whether a VolumeSnapshotContent created through the VolumeSnapshotClass should be deleted when its bound VolumeSnapshot is deleted.
      jsonPath: .deletionPolicy
      name: DeletionPolicy
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1beta1
    # This indicates the v1beta1 version of the custom resource is deprecated.
    # API requests to this version receive a warning in the server response.
    deprecated: true
    # This overrides the default warning returned to clients making v1beta1 API requests.
    deprecationWarning: "snapshot.storage.k8s.io/v1beta1 VolumeSnapshotClass is deprecated; use snapshot.storage.k8s.io/v1 VolumeSnapshotClass"
    schema:
      openAPIV3Schema:
        description: VolumeSnapshotClass specifies parameters that a underlying storage system uses when creating a volume snapshot. A specific VolumeSnapshotClass is used by specifying its name in a VolumeSnapshot object. VolumeSnapshotClasses are non-namespaced
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          deletionPolicy:
            description: deletionPolicy determines whether a VolumeSnapshotContent created through the VolumeSnapshotClass should be deleted when its bound VolumeSnapshot is deleted. Supported values are "Retain" and "Delete". "Retain" means that the VolumeSnapshotContent and its physical snapshot on underlying storage system are kept. "Delete" means that the VolumeSnapshotContent and its physical snapshot on underlying storage system are deleted. Required.
            enum:
            - Delete
            - Retain
            type: string
          driver:
            description: driver is the name of the storage driver that handles this VolumeSnapshotClass. Required.
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          parameters:
            additionalProperties:
              type: string
            description: parameters is a key-value map with storage driver specific parameters for creating snapshots. These values are opaque to Kubernetes.
            type: object
        required:
        - deletionPolicy
        - driver
        type: object
    served: false
    storage: false
    subresources: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
`)

func deployTenantBaseSnapshotStorageK8sIo_volumesnapshotclassesYamlBytes() ([]byte, error) {
	return _deployTenantBaseSnapshotStorageK8sIo_volumesnapshotclassesYaml, nil
}

func deployTenantBaseSnapshotStorageK8sIo_volumesnapshotclassesYaml() (*asset, error) {
	bytes, err := deployTenantBaseSnapshotStorageK8sIo_volumesnapshotclassesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/tenant/base/snapshot.storage.k8s.io_volumesnapshotclasses.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployTenantBaseSnapshotStorageK8sIo_volumesnapshotcontentsYaml = []byte(`---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    api-approved.kubernetes.io: "https://github.com/kubernetes-csi/external-snapshotter/pull/955"
    controller-gen.kubebuilder.io/version: v0.12.0
  creationTimestamp: null
  name: volumesnapshotcontents.snapshot.storage.k8s.io
spec:
  group: snapshot.storage.k8s.io
  names:
    kind: VolumeSnapshotContent
    listKind: VolumeSnapshotContentList
    plural: volumesnapshotcontents
    shortNames:
    - vsc
    - vscs
    singular: volumesnapshotcontent
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - description: Indicates if the snapshot is ready to be used to restore a volume.
      jsonPath: .status.readyToUse
      name: ReadyToUse
      type: boolean
    - description: Represents the complete size of the snapshot in bytes
      jsonPath: .status.restoreSize
      name: RestoreSize
      type: integer
    - description: Determines whether this VolumeSnapshotContent and its physical
        snapshot on the underlying storage system should be deleted when its bound
        VolumeSnapshot is deleted.
      jsonPath: .spec.deletionPolicy
      name: DeletionPolicy
      type: string
    - description: Name of the CSI driver used to create the physical snapshot on
        the underlying storage system.
      jsonPath: .spec.driver
      name: Driver
      type: string
    - description: Name of the VolumeSnapshotClass to which this snapshot belongs.
      jsonPath: .spec.volumeSnapshotClassName
      name: VolumeSnapshotClass
      type: string
    - description: Name of the VolumeSnapshot object to which this VolumeSnapshotContent
        object is bound.
      jsonPath: .spec.volumeSnapshotRef.name
      name: VolumeSnapshot
      type: string
    - description: Namespace of the VolumeSnapshot object to which this VolumeSnapshotContent object is bound.
      jsonPath: .spec.volumeSnapshotRef.namespace
      name: VolumeSnapshotNamespace
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1
    schema:
      openAPIV3Schema:
        description: VolumeSnapshotContent represents the actual "on-disk" snapshot
          object in the underlying storage system
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: spec defines properties of a VolumeSnapshotContent created
              by the underlying storage system. Required.
            properties:
              deletionPolicy:
                description: deletionPolicy determines whether this VolumeSnapshotContent
                  and its physical snapshot on the underlying storage system should
                  be deleted when its bound VolumeSnapshot is deleted. Supported values
                  are "Retain" and "Delete". "Retain" means that the VolumeSnapshotContent
                  and its physical snapshot on underlying storage system are kept.
                  "Delete" means that the VolumeSnapshotContent and its physical snapshot
                  on underlying storage system are deleted. For dynamically provisioned
                  snapshots, this field will automatically be filled in by the CSI
                  snapshotter sidecar with the "DeletionPolicy" field defined in the
                  corresponding VolumeSnapshotClass. For pre-existing snapshots, users
                  MUST specify this field when creating the VolumeSnapshotContent
                  object. Required.
                enum:
                - Delete
                - Retain
                type: string
              driver:
                description: driver is the name of the CSI driver used to create the
                  physical snapshot on the underlying storage system. This MUST be
                  the same as the name returned by the CSI GetPluginName() call for
                  that driver. Required.
                type: string
              source:
                description: source specifies whether the snapshot is (or should be)
                  dynamically provisioned or already exists, and just requires a Kubernetes
                  object representation. This field is immutable after creation. Required.
                properties:
                  snapshotHandle:
                    description: snapshotHandle specifies the CSI "snapshot_id" of
                      a pre-existing snapshot on the underlying storage system for
                      which a Kubernetes object representation was (or should be)
                      created. This field is immutable.
                    type: string
                  volumeHandle:
                    description: volumeHandle specifies the CSI "volume_id" of the
                      volume from which a snapshot should be dynamically taken from.
                      This field is immutable.
                    type: string
                type: object
                oneOf:
                - required: ["snapshotHandle"]
                - required: ["volumeHandle"]
              sourceVolumeMode:
                description: SourceVolumeMode is the mode of the volume whose snapshot
                  is taken. Can be either “Filesystem” or “Block”. If not specified,
                  it indicates the source volume's mode is unknown. This field is
                  immutable. This field is an alpha field.
                type: string
              volumeSnapshotClassName:
                description: name of the VolumeSnapshotClass from which this snapshot
                  was (or will be) created. Note that after provisioning, the VolumeSnapshotClass
                  may be deleted or recreated with different set of values, and as
                  such, should not be referenced post-snapshot creation.
                type: string
              volumeSnapshotRef:
                description: volumeSnapshotRef specifies the VolumeSnapshot object
                  to which this VolumeSnapshotContent object is bound. VolumeSnapshot.Spec.VolumeSnapshotContentName
                  field must reference to this VolumeSnapshotContent's name for the
                  bidirectional binding to be valid. For a pre-existing VolumeSnapshotContent
                  object, name and namespace of the VolumeSnapshot object MUST be
                  provided for binding to happen. This field is immutable after creation.
                  Required.
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  fieldPath:
                    description: 'If referring to a piece of an object instead of
                      an entire object, this string should contain a valid JSON/Go
                      field access statement, such as desiredState.manifest.containers[2].
                      For example, if the object reference is to a container within
                      a pod, this would take on a value like: "spec.containers{name}"
                      (where "name" refers to the name of the container that triggered
                      the event) or if no container name is specified "spec.containers[2]"
                      (container with index 2 in this pod). This syntax is chosen
                      only to have some well-defined way of referencing a part of
                      an object. TODO: this design is not final and this field is
                      subject to change in the future.'
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  namespace:
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                    type: string
                  resourceVersion:
                    description: 'Specific resourceVersion to which this reference
                      is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                    type: string
                  uid:
                    description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                    type: string
                type: object
                x-kubernetes-map-type: atomic
            required:
            - deletionPolicy
            - driver
            - source
            - volumeSnapshotRef
            type: object
          status:
            description: status represents the current information of a snapshot.
            properties:
              creationTime:
                description: creationTime is the timestamp when the point-in-time
                  snapshot is taken by the underlying storage system. In dynamic snapshot
                  creation case, this field will be filled in by the CSI snapshotter
                  sidecar with the "creation_time" value returned from CSI "CreateSnapshot"
                  gRPC call. For a pre-existing snapshot, this field will be filled
                  with the "creation_time" value returned from the CSI "ListSnapshots"
                  gRPC call if the driver supports it. If not specified, it indicates
                  the creation time is unknown. The format of this field is a Unix
                  nanoseconds time encoded as an int64. On Unix, the command ` + "`" + `date
                  +%s%N` + "`" + ` returns the current time in nanoseconds since 1970-01-01
                  00:00:00 UTC.
                format: int64
                type: integer
              error:
                description: error is the last observed error during snapshot creation,
                  if any. Upon success after retry, this error field will be cleared.
                properties:
                  message:
                    description: 'message is a string detailing the encountered error
                      during snapshot creation if specified. NOTE: message may be
                      logged, and it should not contain sensitive information.'
                    type: string
                  time:
                    description: time is the timestamp when the error was encountered.
                    format: date-time
                    type: string
                type: object
              readyToUse:
                description: readyToUse indicates if a snapshot is ready to be used
                  to restore a volume. In dynamic snapshot creation case, this field
                  will be filled in by the CSI snapshotter sidecar with the "ready_to_use"
                  value returned from CSI "CreateSnapshot" gRPC call. For a pre-existing
                  snapshot, this field will be filled with the "ready_to_use" value
                  returned from the CSI "ListSnapshots" gRPC call if the driver supports
                  it, otherwise, this field will be set to "True". If not specified,
                  it means the readiness of a snapshot is unknown.
                type: boolean
              restoreSize:
                description: restoreSize represents the complete size of the snapshot
                  in bytes. In dynamic snapshot creation case, this field will be
                  filled in by the CSI snapshotter sidecar with the "size_bytes" value
                  returned from CSI "CreateSnapshot" gRPC call. For a pre-existing
                  snapshot, this field will be filled with the "size_bytes" value
                  returned from the CSI "ListSnapshots" gRPC call if the driver supports
                  it. When restoring a volume from this snapshot, the size of the
                  volume MUST NOT be smaller than the restoreSize if it is specified,
                  otherwise the restoration will fail. If not specified, it indicates
                  that the size is unknown.
                format: int64
                minimum: 0
                type: integer
              snapshotHandle:
                description: snapshotHandle is the CSI "snapshot_id" of a snapshot
                  on the underlying storage system. If not specified, it indicates
                  that dynamic snapshot creation has either failed or it is still
                  in progress.
                type: string
              volumeGroupSnapshotHandle:
                description: VolumeGroupSnapshotHandle is the CSI "group_snapshot_id"
                  of a group snapshot on the underlying storage system.
                type: string
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
  - additionalPrinterColumns:
    - description: Indicates if the snapshot is ready to be used to restore a volume.
      jsonPath: .status.readyToUse
      name: ReadyToUse
      type: boolean
    - description: Represents the complete size of the snapshot in bytes
      jsonPath: .status.restoreSize
      name: RestoreSize
      type: integer
    - description: Determines whether this VolumeSnapshotContent and its physical snapshot on the underlying storage system should be deleted when its bound VolumeSnapshot is deleted.
      jsonPath: .spec.deletionPolicy
      name: DeletionPolicy
      type: string
    - description: Name of the CSI driver used to create the physical snapshot on the underlying storage system.
      jsonPath: .spec.driver
      name: Driver
      type: string
    - description: Name of the VolumeSnapshotClass to which this snapshot belongs.
      jsonPath: .spec.volumeSnapshotClassName
      name: VolumeSnapshotClass
      type: string
    - description: Name of the VolumeSnapshot object to which this VolumeSnapshotContent object is bound.
      jsonPath: .spec.volumeSnapshotRef.name
      name: VolumeSnapshot
      type: string
    - description: Namespace of the VolumeSnapshot object to which this VolumeSnapshotContent object is bound.
      jsonPath: .spec.volumeSnapshotRef.namespace
      name: VolumeSnapshotNamespace
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1beta1
    # This indicates the v1beta1 version of the custom resource is deprecated.
    # API requests to this version receive a warning in the server response.
    deprecated: true
    # This overrides the default warning returned to clients making v1beta1 API requests.
    deprecationWarning: "snapshot.storage.k8s.io/v1beta1 VolumeSnapshotContent is deprecated; use snapshot.storage.k8s.io/v1 VolumeSnapshotContent"
    schema:
      openAPIV3Schema:
        description: VolumeSnapshotContent represents the actual "on-disk" snapshot object in the underlying storage system
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          spec:
            description: spec defines properties of a VolumeSnapshotContent created by the underlying storage system. Required.
            properties:
              deletionPolicy:
                description: deletionPolicy determines whether this VolumeSnapshotContent and its physical snapshot on the underlying storage system should be deleted when its bound VolumeSnapshot is deleted. Supported values are "Retain" and "Delete". "Retain" means that the VolumeSnapshotContent and its physical snapshot on underlying storage system are kept. "Delete" means that the VolumeSnapshotContent and its physical snapshot on underlying storage system are deleted. For dynamically provisioned snapshots, this field will automatically be filled in by the CSI snapshotter sidecar with the "DeletionPolicy" field defined in the corresponding VolumeSnapshotClass. For pre-existing snapshots, users MUST specify this field when creating the  VolumeSnapshotContent object. Required.
                enum:
                - Delete
                - Retain
                type: string
              driver:
                description: driver is the name of the CSI driver used to create the physical snapshot on the underlying storage system. This MUST be the same as the name returned by the CSI GetPluginName() call for that driver. Required.
                type: string
              source:
                description: source specifies whether the snapshot is (or should be) dynamically provisioned or already exists, and just requires a Kubernetes object representation. This field is immutable after creation. Required.
                properties:
                  snapshotHandle:
                    description: snapshotHandle specifies the CSI "snapshot_id" of a pre-existing snapshot on the underlying storage system for which a Kubernetes object representation was (or should be) created. This field is immutable.
                    type: string
                  volumeHandle:
                    description: volumeHandle specifies the CSI "volume_id" of the volume from which a snapshot should be dynamically taken from. This field is immutable.
                    type: string
                type: object
              volumeSnapshotClassName:
                description: name of the VolumeSnapshotClass from which this snapshot was (or will be) created. Note that after provisioning, the VolumeSnapshotClass may be deleted or recreated with different set of values, and as such, should not be referenced post-snapshot creation.
                type: string
              volumeSnapshotRef:
                description: volumeSnapshotRef specifies the VolumeSnapshot object to which this VolumeSnapshotContent object is bound. VolumeSnapshot.Spec.VolumeSnapshotContentName field must reference to this VolumeSnapshotContent's name for the bidirectional binding to be valid. For a pre-existing VolumeSnapshotContent object, name and namespace of the VolumeSnapshot object MUST be provided for binding to happen. This field is immutable after creation. Required.
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  fieldPath:
                    description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  namespace:
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                    type: string
                  resourceVersion:
                    description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                    type: string
                  uid:
                    description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                    type: string
                type: object
            required:
            - deletionPolicy
            - driver
            - source
            - volumeSnapshotRef
            type: object
          status:
            description: status represents the current information of a snapshot.
            properties:
              creationTime:
                description: creationTime is the timestamp when the point-in-time snapshot is taken by the underlying storage system. In dynamic snapshot creation case, this field will be filled in by the CSI snapshotter sidecar with the "creation_time" value returned from CSI "CreateSnapshot" gRPC call. For a pre-existing snapshot, this field will be filled with the "creation_time" value returned from the CSI "ListSnapshots" gRPC call if the driver supports it. If not specified, it indicates the creation time is unknown. The format of this field is a Unix nanoseconds time encoded as an int64. On Unix, the command ` + "`" + `date +%s%N` + "`" + ` returns the current time in nanoseconds since 1970-01-01 00:00:00 UTC.
                format: int64
                type: integer
              error:
                description: error is the last observed error during snapshot creation, if any. Upon success after retry, this error field will be cleared.
                properties:
                  message:
                    description: 'message is a string detailing the encountered error during snapshot creation if specified. NOTE: message may be logged, and it should not contain sensitive information.'
                    type: string
                  time:
                    description: time is the timestamp when the error was encountered.
                    format: date-time
                    type: string
                type: object
              readyToUse:
                description: readyToUse indicates if a snapshot is ready to be used to restore a volume. In dynamic snapshot creation case, this field will be filled in by the CSI snapshotter sidecar with the "ready_to_use" value returned from CSI "CreateSnapshot" gRPC call. For a pre-existing snapshot, this field will be filled with the "ready_to_use" value returned from the CSI "ListSnapshots" gRPC call if the driver supports it, otherwise, this field will be set to "True". If not specified, it means the readiness of a snapshot is unknown.
                type: boolean
              restoreSize:
                description: restoreSize represents the complete size of the snapshot in bytes. In dynamic snapshot creation case, this field will be filled in by the CSI snapshotter sidecar with the "size_bytes" value returned from CSI "CreateSnapshot" gRPC call. For a pre-existing snapshot, this field will be filled with the "size_bytes" value returned from the CSI "ListSnapshots" gRPC call if the driver supports it. When restoring a volume from this snapshot, the size of the volume MUST NOT be smaller than the restoreSize if it is specified, otherwise the restoration will fail. If not specified, it indicates that the size is unknown.
                format: int64
                minimum: 0
                type: integer
              snapshotHandle:
                description: snapshotHandle is the CSI "snapshot_id" of a snapshot on the underlying storage system. If not specified, it indicates that dynamic snapshot creation has either failed or it is still in progress.
                type: string
            type: object
        required:
        - spec
        type: object
    served: false
    storage: false
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
`)

func deployTenantBaseSnapshotStorageK8sIo_volumesnapshotcontentsYamlBytes() ([]byte, error) {
	return _deployTenantBaseSnapshotStorageK8sIo_volumesnapshotcontentsYaml, nil
}

func deployTenantBaseSnapshotStorageK8sIo_volumesnapshotcontentsYaml() (*asset, error) {
	bytes, err := deployTenantBaseSnapshotStorageK8sIo_volumesnapshotcontentsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/tenant/base/snapshot.storage.k8s.io_volumesnapshotcontents.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployTenantBaseSnapshotStorageK8sIo_volumesnapshotsYaml = []byte(`---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    api-approved.kubernetes.io: "https://github.com/kubernetes-csi/external-snapshotter/pull/814"
    controller-gen.kubebuilder.io/version: v0.12.0
  creationTimestamp: null
  name: volumesnapshots.snapshot.storage.k8s.io
spec:
  group: snapshot.storage.k8s.io
  names:
    kind: VolumeSnapshot
    listKind: VolumeSnapshotList
    plural: volumesnapshots
    shortNames:
    - vs
    singular: volumesnapshot
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - description: Indicates if the snapshot is ready to be used to restore a volume.
      jsonPath: .status.readyToUse
      name: ReadyToUse
      type: boolean
    - description: If a new snapshot needs to be created, this contains the name of
        the source PVC from which this snapshot was (or will be) created.
      jsonPath: .spec.source.persistentVolumeClaimName
      name: SourcePVC
      type: string
    - description: If a snapshot already exists, this contains the name of the existing
        VolumeSnapshotContent object representing the existing snapshot.
      jsonPath: .spec.source.volumeSnapshotContentName
      name: SourceSnapshotContent
      type: string
    - description: Represents the minimum size of volume required to rehydrate from
        this snapshot.
      jsonPath: .status.restoreSize
      name: RestoreSize
      type: string
    - description: The name of the VolumeSnapshotClass requested by the VolumeSnapshot.
      jsonPath: .spec.volumeSnapshotClassName
      name: SnapshotClass
      type: string
    - description: Name of the VolumeSnapshotContent object to which the VolumeSnapshot
        object intends to bind to. Please note that verification of binding actually
        requires checking both VolumeSnapshot and VolumeSnapshotContent to ensure
        both are pointing at each other. Binding MUST be verified prior to usage of
        this object.
      jsonPath: .status.boundVolumeSnapshotContentName
      name: SnapshotContent
      type: string
    - description: Timestamp when the point-in-time snapshot was taken by the underlying
        storage system.
      jsonPath: .status.creationTime
      name: CreationTime
      type: date
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1
    schema:
      openAPIV3Schema:
        description: VolumeSnapshot is a user's request for either creating a point-in-time
          snapshot of a persistent volume, or binding to a pre-existing snapshot.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: 'spec defines the desired characteristics of a snapshot requested
              by a user. More info: https://kubernetes.io/docs/concepts/storage/volume-snapshots#volumesnapshots
              Required.'
            properties:
              source:
                description: source specifies where a snapshot will be created from.
                  This field is immutable after creation. Required.
                properties:
                  persistentVolumeClaimName:
                    description: persistentVolumeClaimName specifies the name of the
                      PersistentVolumeClaim object representing the volume from which
                      a snapshot should be created. This PVC is assumed to be in the
                      same namespace as the VolumeSnapshot object. This field should
                      be set if the snapshot does not exists, and needs to be created.
                      This field is immutable.
                    type: string
                  volumeSnapshotContentName:
                    description: volumeSnapshotContentName specifies the name of a
                      pre-existing VolumeSnapshotContent object representing an existing
                      volume snapshot. This field should be set if the snapshot already
                      exists and only needs a representation in Kubernetes. This field
                      is immutable.
                    type: string
                type: object
                oneOf:
                - required: ["persistentVolumeClaimName"]
                - required: ["volumeSnapshotContentName"]
              volumeSnapshotClassName:
                description: 'VolumeSnapshotClassName is the name of the VolumeSnapshotClass
                  requested by the VolumeSnapshot. VolumeSnapshotClassName may be
                  left nil to indicate that the default SnapshotClass should be used.
                  A given cluster may have multiple default Volume SnapshotClasses:
                  one default per CSI Driver. If a VolumeSnapshot does not specify
                  a SnapshotClass, VolumeSnapshotSource will be checked to figure
                  out what the associated CSI Driver is, and the default VolumeSnapshotClass
                  associated with that CSI Driver will be used. If more than one VolumeSnapshotClass
                  exist for a given CSI Driver and more than one have been marked
                  as default, CreateSnapshot will fail and generate an event. Empty
                  string is not allowed for this field.'
                type: string
            required:
            - source
            type: object
          status:
            description: status represents the current information of a snapshot.
              Consumers must verify binding between VolumeSnapshot and VolumeSnapshotContent
              objects is successful (by validating that both VolumeSnapshot and VolumeSnapshotContent
              point at each other) before using this object.
            properties:
              boundVolumeSnapshotContentName:
                description: 'boundVolumeSnapshotContentName is the name of the VolumeSnapshotContent
                  object to which this VolumeSnapshot object intends to bind to. If
                  not specified, it indicates that the VolumeSnapshot object has not
                  been successfully bound to a VolumeSnapshotContent object yet. NOTE:
                  To avoid possible security issues, consumers must verify binding
                  between VolumeSnapshot and VolumeSnapshotContent objects is successful
                  (by validating that both VolumeSnapshot and VolumeSnapshotContent
                  point at each other) before using this object.'
                type: string
              creationTime:
                description: creationTime is the timestamp when the point-in-time
                  snapshot is taken by the underlying storage system. In dynamic snapshot
                  creation case, this field will be filled in by the snapshot controller
                  with the "creation_time" value returned from CSI "CreateSnapshot"
                  gRPC call. For a pre-existing snapshot, this field will be filled
                  with the "creation_time" value returned from the CSI "ListSnapshots"
                  gRPC call if the driver supports it. If not specified, it may indicate
                  that the creation time of the snapshot is unknown.
                format: date-time
                type: string
              error:
                description: error is the last observed error during snapshot creation,
                  if any. This field could be helpful to upper level controllers(i.e.,
                  application controller) to decide whether they should continue on
                  waiting for the snapshot to be created based on the type of error
                  reported. The snapshot controller will keep retrying when an error
                  occurs during the snapshot creation. Upon success, this error field
                  will be cleared.
                properties:
                  message:
                    description: 'message is a string detailing the encountered error
                      during snapshot creation if specified. NOTE: message may be
                      logged, and it should not contain sensitive information.'
                    type: string
                  time:
                    description: time is the timestamp when the error was encountered.
                    format: date-time
                    type: string
                type: object
              readyToUse:
                description: readyToUse indicates if the snapshot is ready to be used
                  to restore a volume. In dynamic snapshot creation case, this field
                  will be filled in by the snapshot controller with the "ready_to_use"
                  value returned from CSI "CreateSnapshot" gRPC call. For a pre-existing
                  snapshot, this field will be filled with the "ready_to_use" value
                  returned from the CSI "ListSnapshots" gRPC call if the driver supports
                  it, otherwise, this field will be set to "True". If not specified,
                  it means the readiness of a snapshot is unknown.
                type: boolean
              restoreSize:
                type: string
                description: restoreSize represents the minimum size of volume required
                  to create a volume from this snapshot. In dynamic snapshot creation
                  case, this field will be filled in by the snapshot controller with
                  the "size_bytes" value returned from CSI "CreateSnapshot" gRPC call.
                  For a pre-existing snapshot, this field will be filled with the
                  "size_bytes" value returned from the CSI "ListSnapshots" gRPC call
                  if the driver supports it. When restoring a volume from this snapshot,
                  the size of the volume MUST NOT be smaller than the restoreSize
                  if it is specified, otherwise the restoration will fail. If not
                  specified, it indicates that the size is unknown.
                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                x-kubernetes-int-or-string: true
              volumeGroupSnapshotName:
                description: VolumeGroupSnapshotName is the name of the VolumeGroupSnapshot
                  of which this VolumeSnapshot is a part of.
                type: string
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
  - additionalPrinterColumns:
    - description: Indicates if the snapshot is ready to be used to restore a volume.
      jsonPath: .status.readyToUse
      name: ReadyToUse
      type: boolean
    - description: If a new snapshot needs to be created, this contains the name of the source PVC from which this snapshot was (or will be) created.
      jsonPath: .spec.source.persistentVolumeClaimName
      name: SourcePVC
      type: string
    - description: If a snapshot already exists, this contains the name of the existing VolumeSnapshotContent object representing the existing snapshot.
      jsonPath: .spec.source.volumeSnapshotContentName
      name: SourceSnapshotContent
      type: string
    - description: Represents the minimum size of volume required to rehydrate from this snapshot.
      jsonPath: .status.restoreSize
      name: RestoreSize
      type: string
    - description: The name of the VolumeSnapshotClass requested by the VolumeSnapshot.
      jsonPath: .spec.volumeSnapshotClassName
      name: SnapshotClass
      type: string
    - description: Name of the VolumeSnapshotContent object to which the VolumeSnapshot object intends to bind to. Please note that verification of binding actually requires checking both VolumeSnapshot and VolumeSnapshotContent to ensure both are pointing at each other. Binding MUST be verified prior to usage of this object.
      jsonPath: .status.boundVolumeSnapshotContentName
      name: SnapshotContent
      type: string
    - description: Timestamp when the point-in-time snapshot was taken by the underlying storage system.
      jsonPath: .status.creationTime
      name: CreationTime
      type: date
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1beta1
    # This indicates the v1beta1 version of the custom resource is deprecated.
    # API requests to this version receive a warning in the server response.
    deprecated: true
    # This overrides the default warning returned to clients making v1beta1 API requests.
    deprecationWarning: "snapshot.storage.k8s.io/v1beta1 VolumeSnapshot is deprecated; use snapshot.storage.k8s.io/v1 VolumeSnapshot"
    schema:
      openAPIV3Schema:
        description: VolumeSnapshot is a user's request for either creating a point-in-time snapshot of a persistent volume, or binding to a pre-existing snapshot.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          spec:
            description: 'spec defines the desired characteristics of a snapshot requested by a user. More info: https://kubernetes.io/docs/concepts/storage/volume-snapshots#volumesnapshots Required.'
            properties:
              source:
                description: source specifies where a snapshot will be created from. This field is immutable after creation. Required.
                properties:
                  persistentVolumeClaimName:
                    description: persistentVolumeClaimName specifies the name of the PersistentVolumeClaim object representing the volume from which a snapshot should be created. This PVC is assumed to be in the same namespace as the VolumeSnapshot object. This field should be set if the snapshot does not exists, and needs to be created. This field is immutable.
                    type: string
                  volumeSnapshotContentName:
                    description: volumeSnapshotContentName specifies the name of a pre-existing VolumeSnapshotContent object representing an existing volume snapshot. This field should be set if the snapshot already exists and only needs a representation in Kubernetes. This field is immutable.
                    type: string
                type: object
              volumeSnapshotClassName:
                description: 'VolumeSnapshotClassName is the name of the VolumeSnapshotClass requested by the VolumeSnapshot. VolumeSnapshotClassName may be left nil to indicate that the default SnapshotClass should be used. A given cluster may have multiple default Volume SnapshotClasses: one default per CSI Driver. If a VolumeSnapshot does not specify a SnapshotClass, VolumeSnapshotSource will be checked to figure out what the associated CSI Driver is, and the default VolumeSnapshotClass associated with that CSI Driver will be used. If more than one VolumeSnapshotClass exist for a given CSI Driver and more than one have been marked as default, CreateSnapshot will fail and generate an event. Empty string is not allowed for this field.'
                type: string
            required:
            - source
            type: object
          status:
            description: status represents the current information of a snapshot. Consumers must verify binding between VolumeSnapshot and VolumeSnapshotContent objects is successful (by validating that both VolumeSnapshot and VolumeSnapshotContent point at each other) before using this object.
            properties:
              boundVolumeSnapshotContentName:
                description: 'boundVolumeSnapshotContentName is the name of the VolumeSnapshotContent object to which this VolumeSnapshot object intends to bind to. If not specified, it indicates that the VolumeSnapshot object has not been successfully bound to a VolumeSnapshotContent object yet. NOTE: To avoid possible security issues, consumers must verify binding between VolumeSnapshot and VolumeSnapshotContent objects is successful (by validating that both VolumeSnapshot and VolumeSnapshotContent point at each other) before using this object.'
                type: string
              creationTime:
                description: creationTime is the timestamp when the point-in-time snapshot is taken by the underlying storage system. In dynamic snapshot creation case, this field will be filled in by the snapshot controller with the "creation_time" value returned from CSI "CreateSnapshot" gRPC call. For a pre-existing snapshot, this field will be filled with the "creation_time" value returned from the CSI "ListSnapshots" gRPC call if the driver supports it. If not specified, it may indicate that the creation time of the snapshot is unknown.
                format: date-time
                type: string
              error:
                description: error is the last observed error during snapshot creation, if any. This field could be helpful to upper level controllers(i.e., application controller) to decide whether they should continue on waiting for the snapshot to be created based on the type of error reported. The snapshot controller will keep retrying when an error occurs during the snapshot creation. Upon success, this error field will be cleared.
                properties:
                  message:
                    description: 'message is a string detailing the encountered error during snapshot creation if specified. NOTE: message may be logged, and it should not contain sensitive information.'
                    type: string
                  time:
                    description: time is the timestamp when the error was encountered.
                    format: date-time
                    type: string
                type: object
              readyToUse:
                description: readyToUse indicates if the snapshot is ready to be used to restore a volume. In dynamic snapshot creation case, this field will be filled in by the snapshot controller with the "ready_to_use" value returned from CSI "CreateSnapshot" gRPC call. For a pre-existing snapshot, this field will be filled with the "ready_to_use" value returned from the CSI "ListSnapshots" gRPC call if the driver supports it, otherwise, this field will be set to "True". If not specified, it means the readiness of a snapshot is unknown.
                type: boolean
              restoreSize:
                type: string
                description: restoreSize represents the minimum size of volume required to create a volume from this snapshot. In dynamic snapshot creation case, this field will be filled in by the snapshot controller with the "size_bytes" value returned from CSI "CreateSnapshot" gRPC call. For a pre-existing snapshot, this field will be filled with the "size_bytes" value returned from the CSI "ListSnapshots" gRPC call if the driver supports it. When restoring a volume from this snapshot, the size of the volume MUST NOT be smaller than the restoreSize if it is specified, otherwise the restoration will fail. If not specified, it indicates that the size is unknown.
                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                x-kubernetes-int-or-string: true
            type: object
        required:
        - spec
        type: object
    served: false
    storage: false
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
`)

func deployTenantBaseSnapshotStorageK8sIo_volumesnapshotsYamlBytes() ([]byte, error) {
	return _deployTenantBaseSnapshotStorageK8sIo_volumesnapshotsYaml, nil
}

func deployTenantBaseSnapshotStorageK8sIo_volumesnapshotsYaml() (*asset, error) {
	bytes, err := deployTenantBaseSnapshotStorageK8sIo_volumesnapshotsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/tenant/base/snapshot.storage.k8s.io_volumesnapshots.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployTenantDevOverlayInfraNamespaceConfigmapYaml = []byte(`apiVersion: v1
kind: ConfigMap
metadata:
  name: driver-config
  namespace: kubevirt-csi-driver
data:
  infraClusterNamespace: kvcluster
  infraClusterLabels: csi-driver/cluster=tenant
`)

func deployTenantDevOverlayInfraNamespaceConfigmapYamlBytes() ([]byte, error) {
	return _deployTenantDevOverlayInfraNamespaceConfigmapYaml, nil
}

func deployTenantDevOverlayInfraNamespaceConfigmapYaml() (*asset, error) {
	bytes, err := deployTenantDevOverlayInfraNamespaceConfigmapYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/tenant/dev-overlay/infra-namespace-configmap.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployTenantDevOverlayKustomizationYaml = []byte(`resources:
- ../base
namespace: kubevirt-csi-driver
patches:
- path: infra-namespace-configmap.yaml
- path: node.yaml
- path: storageclass.yaml
`)

func deployTenantDevOverlayKustomizationYamlBytes() ([]byte, error) {
	return _deployTenantDevOverlayKustomizationYaml, nil
}

func deployTenantDevOverlayKustomizationYaml() (*asset, error) {
	bytes, err := deployTenantDevOverlayKustomizationYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/tenant/dev-overlay/kustomization.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployTenantDevOverlayNodeYaml = []byte(`kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: kubevirt-csi-node
  namespace: kubevirt-csi-driver
spec:
  template:
    spec:
      containers:
        - name: csi-driver
          image: 192.168.66.2:5000/kubevirt-csi-driver:latest
`)

func deployTenantDevOverlayNodeYamlBytes() ([]byte, error) {
	return _deployTenantDevOverlayNodeYaml, nil
}

func deployTenantDevOverlayNodeYaml() (*asset, error) {
	bytes, err := deployTenantDevOverlayNodeYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/tenant/dev-overlay/node.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployTenantDevOverlayStorageclassYaml = []byte(`apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: kubevirt
  annotations:
    storageclass.kubernetes.io/is-default-class: "true"
provisioner: csi.kubevirt.io
parameters:
  infraStorageClassName: rook-ceph-block
  bus: scsi
`)

func deployTenantDevOverlayStorageclassYamlBytes() ([]byte, error) {
	return _deployTenantDevOverlayStorageclassYaml, nil
}

func deployTenantDevOverlayStorageclassYaml() (*asset, error) {
	bytes, err := deployTenantDevOverlayStorageclassYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/tenant/dev-overlay/storageclass.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"deploy/controller-infra/base/deploy.yaml":                               deployControllerInfraBaseDeployYaml,
	"deploy/controller-infra/base/kustomization.yaml":                        deployControllerInfraBaseKustomizationYaml,
	"deploy/controller-infra/dev-overlay/controller.yaml":                    deployControllerInfraDevOverlayControllerYaml,
	"deploy/controller-infra/dev-overlay/infra-namespace-configmap.yaml":     deployControllerInfraDevOverlayInfraNamespaceConfigmapYaml,
	"deploy/controller-infra/dev-overlay/kustomization.yaml":                 deployControllerInfraDevOverlayKustomizationYaml,
	"deploy/controller-tenant/base/deploy.yaml":                              deployControllerTenantBaseDeployYaml,
	"deploy/controller-tenant/base/kustomization.yaml":                       deployControllerTenantBaseKustomizationYaml,
	"deploy/controller-tenant/dev-overlay/controller.yaml":                   deployControllerTenantDevOverlayControllerYaml,
	"deploy/controller-tenant/dev-overlay/kustomization.yaml":                deployControllerTenantDevOverlayKustomizationYaml,
	"deploy/example/infracluster-kubeconfig.yaml":                            deployExampleInfraclusterKubeconfigYaml,
	"deploy/example/kubevirt-config.yaml":                                    deployExampleKubevirtConfigYaml,
	"deploy/example/kubevirt.yaml":                                           deployExampleKubevirtYaml,
	"deploy/example/storage-claim.yaml":                                      deployExampleStorageClaimYaml,
	"deploy/example/storageclass.yaml":                                       deployExampleStorageclassYaml,
	"deploy/example/test-pod.yaml":                                           deployExampleTestPodYaml,
	"deploy/infra-cluster-service-account.yaml":                              deployInfraClusterServiceAccountYaml,
	"deploy/tenant/base/deploy.yaml":                                         deployTenantBaseDeployYaml,
	"deploy/tenant/base/kustomization.yaml":                                  deployTenantBaseKustomizationYaml,
	"deploy/tenant/base/rbac-snapshot-controller.yaml":                       deployTenantBaseRbacSnapshotControllerYaml,
	"deploy/tenant/base/setup-snapshot-controller.yaml":                      deployTenantBaseSetupSnapshotControllerYaml,
	"deploy/tenant/base/snapshot.storage.k8s.io_volumesnapshotclasses.yaml":  deployTenantBaseSnapshotStorageK8sIo_volumesnapshotclassesYaml,
	"deploy/tenant/base/snapshot.storage.k8s.io_volumesnapshotcontents.yaml": deployTenantBaseSnapshotStorageK8sIo_volumesnapshotcontentsYaml,
	"deploy/tenant/base/snapshot.storage.k8s.io_volumesnapshots.yaml":        deployTenantBaseSnapshotStorageK8sIo_volumesnapshotsYaml,
	"deploy/tenant/dev-overlay/infra-namespace-configmap.yaml":               deployTenantDevOverlayInfraNamespaceConfigmapYaml,
	"deploy/tenant/dev-overlay/kustomization.yaml":                           deployTenantDevOverlayKustomizationYaml,
	"deploy/tenant/dev-overlay/node.yaml":                                    deployTenantDevOverlayNodeYaml,
	"deploy/tenant/dev-overlay/storageclass.yaml":                            deployTenantDevOverlayStorageclassYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"deploy": {nil, map[string]*bintree{
		"controller-infra": {nil, map[string]*bintree{
			"base": {nil, map[string]*bintree{
				"deploy.yaml":        {deployControllerInfraBaseDeployYaml, map[string]*bintree{}},
				"kustomization.yaml": {deployControllerInfraBaseKustomizationYaml, map[string]*bintree{}},
			}},
			"dev-overlay": {nil, map[string]*bintree{
				"controller.yaml":                {deployControllerInfraDevOverlayControllerYaml, map[string]*bintree{}},
				"infra-namespace-configmap.yaml": {deployControllerInfraDevOverlayInfraNamespaceConfigmapYaml, map[string]*bintree{}},
				"kustomization.yaml":             {deployControllerInfraDevOverlayKustomizationYaml, map[string]*bintree{}},
			}},
		}},
		"controller-tenant": {nil, map[string]*bintree{
			"base": {nil, map[string]*bintree{
				"deploy.yaml":        {deployControllerTenantBaseDeployYaml, map[string]*bintree{}},
				"kustomization.yaml": {deployControllerTenantBaseKustomizationYaml, map[string]*bintree{}},
			}},
			"dev-overlay": {nil, map[string]*bintree{
				"controller.yaml":    {deployControllerTenantDevOverlayControllerYaml, map[string]*bintree{}},
				"kustomization.yaml": {deployControllerTenantDevOverlayKustomizationYaml, map[string]*bintree{}},
			}},
		}},
		"example": {nil, map[string]*bintree{
			"infracluster-kubeconfig.yaml": {deployExampleInfraclusterKubeconfigYaml, map[string]*bintree{}},
			"kubevirt-config.yaml":         {deployExampleKubevirtConfigYaml, map[string]*bintree{}},
			"kubevirt.yaml":                {deployExampleKubevirtYaml, map[string]*bintree{}},
			"storage-claim.yaml":           {deployExampleStorageClaimYaml, map[string]*bintree{}},
			"storageclass.yaml":            {deployExampleStorageclassYaml, map[string]*bintree{}},
			"test-pod.yaml":                {deployExampleTestPodYaml, map[string]*bintree{}},
		}},
		"infra-cluster-service-account.yaml": {deployInfraClusterServiceAccountYaml, map[string]*bintree{}},
		"tenant": {nil, map[string]*bintree{
			"base": {nil, map[string]*bintree{
				"deploy.yaml":                                         {deployTenantBaseDeployYaml, map[string]*bintree{}},
				"kustomization.yaml":                                  {deployTenantBaseKustomizationYaml, map[string]*bintree{}},
				"rbac-snapshot-controller.yaml":                       {deployTenantBaseRbacSnapshotControllerYaml, map[string]*bintree{}},
				"setup-snapshot-controller.yaml":                      {deployTenantBaseSetupSnapshotControllerYaml, map[string]*bintree{}},
				"snapshot.storage.k8s.io_volumesnapshotclasses.yaml":  {deployTenantBaseSnapshotStorageK8sIo_volumesnapshotclassesYaml, map[string]*bintree{}},
				"snapshot.storage.k8s.io_volumesnapshotcontents.yaml": {deployTenantBaseSnapshotStorageK8sIo_volumesnapshotcontentsYaml, map[string]*bintree{}},
				"snapshot.storage.k8s.io_volumesnapshots.yaml":        {deployTenantBaseSnapshotStorageK8sIo_volumesnapshotsYaml, map[string]*bintree{}},
			}},
			"dev-overlay": {nil, map[string]*bintree{
				"infra-namespace-configmap.yaml": {deployTenantDevOverlayInfraNamespaceConfigmapYaml, map[string]*bintree{}},
				"kustomization.yaml":             {deployTenantDevOverlayKustomizationYaml, map[string]*bintree{}},
				"node.yaml":                      {deployTenantDevOverlayNodeYaml, map[string]*bintree{}},
				"storageclass.yaml":              {deployTenantDevOverlayStorageclassYaml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
