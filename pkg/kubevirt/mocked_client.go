// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/kubevirt/client.go

// Package kubevirt is a generated GoMock package.
package kubevirt

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/kubernetes-csi/external-snapshotter/client/v6/apis/volumesnapshot/v1"
	v10 "kubevirt.io/api/core/v1"
	v1beta1 "kubevirt.io/containerized-data-importer-api/pkg/apis/core/v1beta1"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// AddVolumeToVM mocks base method.
func (m *MockClient) AddVolumeToVM(ctx context.Context, namespace, vmName string, hotPlugRequest *v10.AddVolumeOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddVolumeToVM", ctx, namespace, vmName, hotPlugRequest)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddVolumeToVM indicates an expected call of AddVolumeToVM.
func (mr *MockClientMockRecorder) AddVolumeToVM(ctx, namespace, vmName, hotPlugRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVolumeToVM", reflect.TypeOf((*MockClient)(nil).AddVolumeToVM), ctx, namespace, vmName, hotPlugRequest)
}

// CreateDataVolume mocks base method.
func (m *MockClient) CreateDataVolume(ctx context.Context, namespace string, dataVolume *v1beta1.DataVolume) (*v1beta1.DataVolume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDataVolume", ctx, namespace, dataVolume)
	ret0, _ := ret[0].(*v1beta1.DataVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDataVolume indicates an expected call of CreateDataVolume.
func (mr *MockClientMockRecorder) CreateDataVolume(ctx, namespace, dataVolume interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataVolume", reflect.TypeOf((*MockClient)(nil).CreateDataVolume), ctx, namespace, dataVolume)
}

// CreateVolumeSnapshot mocks base method.
func (m *MockClient) CreateVolumeSnapshot(ctx context.Context, namespace, name, claimName, snapshotClassName string) (*v1.VolumeSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVolumeSnapshot", ctx, namespace, name, claimName, snapshotClassName)
	ret0, _ := ret[0].(*v1.VolumeSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVolumeSnapshot indicates an expected call of CreateVolumeSnapshot.
func (mr *MockClientMockRecorder) CreateVolumeSnapshot(ctx, namespace, name, claimName, snapshotClassName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVolumeSnapshot", reflect.TypeOf((*MockClient)(nil).CreateVolumeSnapshot), ctx, namespace, name, claimName, snapshotClassName)
}

// DeleteDataVolume mocks base method.
func (m *MockClient) DeleteDataVolume(ctx context.Context, namespace, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDataVolume", ctx, namespace, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDataVolume indicates an expected call of DeleteDataVolume.
func (mr *MockClientMockRecorder) DeleteDataVolume(ctx, namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataVolume", reflect.TypeOf((*MockClient)(nil).DeleteDataVolume), ctx, namespace, name)
}

// DeleteVolumeSnapshot mocks base method.
func (m *MockClient) DeleteVolumeSnapshot(ctx context.Context, namespace, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVolumeSnapshot", ctx, namespace, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVolumeSnapshot indicates an expected call of DeleteVolumeSnapshot.
func (mr *MockClientMockRecorder) DeleteVolumeSnapshot(ctx, namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVolumeSnapshot", reflect.TypeOf((*MockClient)(nil).DeleteVolumeSnapshot), ctx, namespace, name)
}

// EnsureSnapshotReady mocks base method.
func (m *MockClient) EnsureSnapshotReady(ctx context.Context, namespace, name string, timeout time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureSnapshotReady", ctx, namespace, name, timeout)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureSnapshotReady indicates an expected call of EnsureSnapshotReady.
func (mr *MockClientMockRecorder) EnsureSnapshotReady(ctx, namespace, name, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureSnapshotReady", reflect.TypeOf((*MockClient)(nil).EnsureSnapshotReady), ctx, namespace, name, timeout)
}

// EnsureVolumeAvailable mocks base method.
func (m *MockClient) EnsureVolumeAvailable(ctx context.Context, namespace, vmName, volumeName string, timeout time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureVolumeAvailable", ctx, namespace, vmName, volumeName, timeout)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureVolumeAvailable indicates an expected call of EnsureVolumeAvailable.
func (mr *MockClientMockRecorder) EnsureVolumeAvailable(ctx, namespace, vmName, volumeName, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureVolumeAvailable", reflect.TypeOf((*MockClient)(nil).EnsureVolumeAvailable), ctx, namespace, vmName, volumeName, timeout)
}

// EnsureVolumeRemoved mocks base method.
func (m *MockClient) EnsureVolumeRemoved(ctx context.Context, namespace, vmName, volumeName string, timeout time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureVolumeRemoved", ctx, namespace, vmName, volumeName, timeout)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureVolumeRemoved indicates an expected call of EnsureVolumeRemoved.
func (mr *MockClientMockRecorder) EnsureVolumeRemoved(ctx, namespace, vmName, volumeName, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureVolumeRemoved", reflect.TypeOf((*MockClient)(nil).EnsureVolumeRemoved), ctx, namespace, vmName, volumeName, timeout)
}

// GetDataVolume mocks base method.
func (m *MockClient) GetDataVolume(ctx context.Context, namespace, name string) (*v1beta1.DataVolume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataVolume", ctx, namespace, name)
	ret0, _ := ret[0].(*v1beta1.DataVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataVolume indicates an expected call of GetDataVolume.
func (mr *MockClientMockRecorder) GetDataVolume(ctx, namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataVolume", reflect.TypeOf((*MockClient)(nil).GetDataVolume), ctx, namespace, name)
}

// GetVirtualMachine mocks base method.
func (m *MockClient) GetVirtualMachine(ctx context.Context, namespace, name string) (*v10.VirtualMachineInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVirtualMachine", ctx, namespace, name)
	ret0, _ := ret[0].(*v10.VirtualMachineInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVirtualMachine indicates an expected call of GetVirtualMachine.
func (mr *MockClientMockRecorder) GetVirtualMachine(ctx, namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualMachine", reflect.TypeOf((*MockClient)(nil).GetVirtualMachine), ctx, namespace, name)
}

// GetVolumeSnapshot mocks base method.
func (m *MockClient) GetVolumeSnapshot(ctx context.Context, namespace, name string) (*v1.VolumeSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeSnapshot", ctx, namespace, name)
	ret0, _ := ret[0].(*v1.VolumeSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeSnapshot indicates an expected call of GetVolumeSnapshot.
func (mr *MockClientMockRecorder) GetVolumeSnapshot(ctx, namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeSnapshot", reflect.TypeOf((*MockClient)(nil).GetVolumeSnapshot), ctx, namespace, name)
}

// GetWorkloadManagingVirtualMachine mocks base method.
func (m *MockClient) GetWorkloadManagingVirtualMachine(ctx context.Context, namespace, name string) (*v10.VirtualMachine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkloadManagingVirtualMachine", ctx, namespace, name)
	ret0, _ := ret[0].(*v10.VirtualMachine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkloadManagingVirtualMachine indicates an expected call of GetWorkloadManagingVirtualMachine.
func (mr *MockClientMockRecorder) GetWorkloadManagingVirtualMachine(ctx, namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkloadManagingVirtualMachine", reflect.TypeOf((*MockClient)(nil).GetWorkloadManagingVirtualMachine), ctx, namespace, name)
}

// ListVirtualMachines mocks base method.
func (m *MockClient) ListVirtualMachines(ctx context.Context, namespace string) ([]v10.VirtualMachineInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVirtualMachines", ctx, namespace)
	ret0, _ := ret[0].([]v10.VirtualMachineInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVirtualMachines indicates an expected call of ListVirtualMachines.
func (mr *MockClientMockRecorder) ListVirtualMachines(ctx, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualMachines", reflect.TypeOf((*MockClient)(nil).ListVirtualMachines), ctx, namespace)
}

// ListVolumeSnapshots mocks base method.
func (m *MockClient) ListVolumeSnapshots(ctx context.Context, namespace string) (*v1.VolumeSnapshotList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVolumeSnapshots", ctx, namespace)
	ret0, _ := ret[0].(*v1.VolumeSnapshotList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVolumeSnapshots indicates an expected call of ListVolumeSnapshots.
func (mr *MockClientMockRecorder) ListVolumeSnapshots(ctx, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVolumeSnapshots", reflect.TypeOf((*MockClient)(nil).ListVolumeSnapshots), ctx, namespace)
}

// Ping mocks base method.
func (m *MockClient) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockClientMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockClient)(nil).Ping), ctx)
}

// RemoveVolumeFromVM mocks base method.
func (m *MockClient) RemoveVolumeFromVM(ctx context.Context, namespace, vmName string, hotPlugRequest *v10.RemoveVolumeOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveVolumeFromVM", ctx, namespace, vmName, hotPlugRequest)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveVolumeFromVM indicates an expected call of RemoveVolumeFromVM.
func (mr *MockClientMockRecorder) RemoveVolumeFromVM(ctx, namespace, vmName, hotPlugRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveVolumeFromVM", reflect.TypeOf((*MockClient)(nil).RemoveVolumeFromVM), ctx, namespace, vmName, hotPlugRequest)
}

// RemoveVolumeFromVMI mocks base method.
func (m *MockClient) RemoveVolumeFromVMI(ctx context.Context, namespace, vmName string, hotPlugRequest *v10.RemoveVolumeOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveVolumeFromVMI", ctx, namespace, vmName, hotPlugRequest)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveVolumeFromVMI indicates an expected call of RemoveVolumeFromVMI.
func (mr *MockClientMockRecorder) RemoveVolumeFromVMI(ctx, namespace, vmName, hotPlugRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveVolumeFromVMI", reflect.TypeOf((*MockClient)(nil).RemoveVolumeFromVMI), ctx, namespace, vmName, hotPlugRequest)
}
